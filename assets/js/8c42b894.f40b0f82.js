"use strict";(self.webpackChunkhanscreations=self.webpackChunkhanscreations||[]).push([[443],{1041:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=n(4848),r=n(8453);const i={sidebar_position:2},o=void 0,a={id:"Avatars/Optimization/Textures",title:"Textures",description:"Textures are an essential part of what makes or breaks an avatar. They can be realistic, toony, or somewhere in between. With this in mind, let's make these perform well!",source:"@site/docs/Avatars/Optimization/Textures.md",sourceDirName:"Avatars/Optimization",slug:"/Avatars/Optimization/Textures",permalink:"/HanDocs/docs/Avatars/Optimization/Textures",draft:!1,unlisted:!1,editUrl:"https://github.com/hantnor/HanDocs/tree/main/docs/Avatars/Optimization/Textures.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Why Optimize?",permalink:"/HanDocs/docs/Avatars/Optimization/"},next:{title:"Materials",permalink:"/HanDocs/docs/Avatars/Optimization/Materials"}},l={},c=[{value:"Resolution",id:"resolution",level:2},{value:"Compression",id:"compression",level:2},{value:"Crunch Compression",id:"crunch-compression",level:3},{value:"Extra Tools",id:"extra-tools",level:2}];function h(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Textures are an essential part of what makes or breaks an avatar. They can be realistic, toony, or somewhere in between. With this in mind, let's make these perform well!"})}),"\n",(0,t.jsxs)(s.p,{children:["For optimizing video memory (VRAM), it is important to remember that your texture size contributes to your avatars overall ",(0,t.jsx)(s.strong,{children:"VRAM"})," usage. The more you limit the impact of these, the lighter of a load your avatar will have on other users. This will lead to smaller download sizes, and happier players!"]}),"\n",(0,t.jsx)(s.h2,{id:"resolution",children:"Resolution"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.em,{children:"Wow, 4K textures look so detailed! I should put these on everything..."})}),"\n",(0,t.jsx)(s.p,{children:"While high-resolution textures may look captivating, performance does take an equal cost. Larger textures mean larger download sizes, and larger cost to performance."}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsxs)(s.p,{children:["Every time you increase the resolution by ",(0,t.jsx)(s.strong,{children:"one"})," step, it ",(0,t.jsx)(s.strong,{children:"quadruples"})," your memory taken up!"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Image",src:n(1035).A+"",width:"2048",height:"2048"})}),"\n",(0,t.jsxs)(s.p,{children:["It's important to find a balance between ",(0,t.jsx)(s.strong,{children:"quality"})," and ",(0,t.jsx)(s.strong,{children:"performance"}),". If you'd like the best tradeoff, use the ",(0,t.jsx)(s.strong,{children:"1-Meter Rule"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Look at your avatar from ",(0,t.jsx)(s.strong,{children:"one meter"})," (3 feet) away. From the original texture's resolution, start decreasing the quality. As soon as you start seeing a significant loss in detail, stop. That's the highest quality you need!","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["For finer details (typically seen on 4K textures), you will not be able to notice these unless you are ",(0,t.jsx)(s.strong,{children:"8 inches"})," away from your avatar. ",(0,t.jsx)(s.em,{children:"In most cases, you will not need 4K textures."})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"(Image comparison of resolutions, BC5 compression at 4k, 2k, 1k, and 512)"}),"\n",(0,t.jsx)(s.h2,{id:"compression",children:"Compression"}),"\n",(0,t.jsxs)(s.p,{children:["Compression methods are a way to shorten the amount of data in an image. In all cases, compression is ",(0,t.jsx)(s.strong,{children:"lossy"}),", meaning that you will almost always lose a small amount of data in your original image."]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["If a texture ",(0,t.jsx)(s.strong,{children:"doesn't"})," have ",(0,t.jsx)(s.strong,{children:"color gradients"})," or ",(0,t.jsx)(s.strong,{children:"alpha transparency"}),", it should be set to ",(0,t.jsx)(s.code,{children:"Normal Quality - DXT1/BC1"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"High Quality"})," will add an alpha channel even though the texture doesn't have/need one, increasing VRAM usage."]}),"\n",(0,t.jsxs)(s.li,{children:["If a texture has an alpha channel but doesn't need one, Unity will automatically use ",(0,t.jsx)(s.code,{children:"DXT5"}),". You'll need to override it to be ",(0,t.jsx)(s.code,{children:"DXT1/BC1"}),".","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.em,{children:"DEV NOTE: Unity 2022 has combined DXT and BC together in some places."})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["If the texture ",(0,t.jsx)(s.strong,{children:"has"})," color gradients or alpha transparency, use ",(0,t.jsx)(s.code,{children:"High Quality - BC7"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If Unity is automatically choosing ",(0,t.jsx)(s.code,{children:"DXT5"}),", use the PC override to set it to ",(0,t.jsx)(s.code,{children:"BC7"}),". ",(0,t.jsx)(s.code,{children:"DXT5"})," uses the same VRAM but has more JPEG-like compression artifacts."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Normal Maps should be PC overridden to use ",(0,t.jsx)(s.code,{children:"BC5"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Normal Maps only use the ",(0,t.jsx)(s.strong,{children:"Red"})," and ",(0,t.jsx)(s.strong,{children:"Green"})," color channels, and BC5 is optimized for textures that use those specifically."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Grayscale images that are entirely black, white, and gray (like masks and AO Maps) can be set to ",(0,t.jsx)(s.code,{children:"Texture Type - Single Channel"}),", ",(0,t.jsx)(s.code,{children:"Channel - Red"}),", ",(0,t.jsx)(s.code,{children:"High Quality - BC4"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Alternatively, you can use PC Override to set it to ",(0,t.jsx)(s.code,{children:"BC4"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["For ",(0,t.jsx)(s.strong,{children:"strictly black-or-white"})," masks, you can set these to a texture resolution of 512 or even 256!"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(s.h3,{id:"crunch-compression",children:"Crunch Compression"}),"\n",(0,t.jsxs)(s.p,{children:["If you need it for reducing download size, you can utilize ",(0,t.jsx)(s.strong,{children:"crunch compression"}),'. This makes a visibly "crunchy" texture at the tradeoff of file sizes. This isn\'t recommended if the quality of your textures is important. ',(0,t.jsxs)(s.em,{children:["This will ",(0,t.jsx)(s.strong,{children:"not"})," help your VRAM usage."]})]}),"\n",(0,t.jsx)(s.p,{children:"(comparison image here, BC5 compared to DXT-1 at 100, 50, 25, and 0)"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["For ",(0,t.jsx)(s.strong,{children:"opaque albedo"})," textures, use ",(0,t.jsx)(s.strong,{children:"RGB Crunched DXT-1"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["For ",(0,t.jsx)(s.strong,{children:"transparent albedo"})," and normal map textures, use ",(0,t.jsx)(s.strong,{children:"RGBA Crunched DXT-5"}),"."]}),"\n"]}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(s.h2,{id:"extra-tools",children:"Extra Tools"}),"\n",(0,t.jsxs)(s.p,{children:["Using extra tools in your project may help streamline your texture optimization process! My recommendation is ",(0,t.jsx)(s.a,{href:"https://github.com/Thryrallo/VRC-Avatar-Performance-Tools/",children:(0,t.jsx)(s.strong,{children:"Thry's Avatar Performance Tools"})}),". You can see what compression method and resolution are being used by every texture!"]}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Image",src:n(3561).A+"",width:"761",height:"780"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["This avatar has ",(0,t.jsx)(s.strong,{children:"35"})," textures, and only takes up ",(0,t.jsx)(s.strong,{children:"66MB"})," of VRAM.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsxs)(s.em,{children:["Example avatar courtesy of ",(0,t.jsx)(s.a,{href:"https://linktr.ee/beanthusiast",children:"Beanthusiast"}),"!"]})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Everything is neatly listed in order of most VRAM impact to least."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Image",src:n(8521).A+"",width:"926",height:"181"})}),"\n",(0,t.jsxs)(s.p,{children:["This tool will also suggest optimizations! It can take care of both ",(0,t.jsx)(s.strong,{children:"resolution"})," and ",(0,t.jsx)(s.strong,{children:"compression methods"}),"."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1035:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/resolution-667690a5d00e01004cfb757a1d2acdff.png"},8521:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/suggestion-2fb76af92f098214443f3c016a78fbe0.png"},3561:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/window-6a85e60be5670107a0fb212d28745582.png"},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(6540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);